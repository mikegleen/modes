"""
    Create a CSV file with the accession numbers of images on the website.

    Read the XML file downloaded from the website using the tools/export
    function, having selected "Media".

    The file was downloaded to:
       HRM_Downloads/collection/heathrobinsonmuseum.WordPress.yyyy-mm-dd.csv
    The filename is the default generated by WordPress.

    Output to hrm/results/collection/WordPress.yyyy-mm-dd.csv
    Output is the sorted list of accession numbers of images in the collection.

    Note the filename appears in several elements of the input XML file.
    However, some of them are not complete or are otherwise not correct. The
    "<guid>" element seems to be the most reliable.

"""
import os
import re
import sys

from utl.normalize import normalize_id, denormalize_id

DOWNLOAD_DIR = '/Users/mlg/Cloud/hrm_downloads/collection'
RESULTS_DIR = '/Users/mlg/pyprj/hrm/results/collection/list_collection'
DOWNLOADPREFIX = 'heathrobinsonmuseum.WordPress.'
RESULTSPREFIX = 'wordpress.'
FILENAMEPAT = r'heathrobinsonmuseum\.WordPress\.(\d{4}-\d\d-\d\d).xml'


def main():
    newest_downloaded = ''
    for filename in os.listdir(DOWNLOAD_DIR):
        if m := re.match(FILENAMEPAT, filename):
            candidate_date = m.group(1)
            if candidate_date > newest_downloaded:
                newest_downloaded = candidate_date
    if newest_downloaded:
        download_path = os.path.join(DOWNLOAD_DIR, DOWNLOADPREFIX
                                     + newest_downloaded + '.xml')
        infile = open(download_path, )
        results_path = os.path.join(RESULTS_DIR, RESULTSPREFIX
                                    + newest_downloaded + '.csv')
        outfile = open(results_path, 'w')

    else:
        print('No match for filename pattern')
        sys.exit()
    print(f'{infile.name=}')
    print(f'{outfile.name=}')

    accns = set()
    for line in infile:
        if m := re.search(r'<guid.*collection_(.*)\.jpg', line):
            naccn = normalize_id(m.group(1))
            if naccn in accns:
                print(f'Duplicate: {m.group(1)}')
            accns.add(naccn)
    for naccn in sorted(accns):
        print(denormalize_id(naccn), file=outfile)
    print(f'{len(accns)} files in collection')


if __name__ == '__main__':
    assert sys.version_info >= (3, 11)
    main()
